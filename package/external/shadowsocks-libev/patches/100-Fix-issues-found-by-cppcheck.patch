From 1397a6fe0f5a337f772289935b8dff264cc2aa89 Mon Sep 17 00:00:00 2001
From: Syrone Wong <wong.syrone@gmail.com>
Date: Wed, 7 Dec 2016 11:50:28 +0800
Subject: [PATCH 1/2] Fix issues found by cppcheck

- GNU treats void* as char* when doing pointer arithmetic, so let's make it clear
- Fix memory leak, save copy from malloc() and pass the origin pointer to free()
- minor type mismatches

Signed-off-by: Syrone Wong <wong.syrone@gmail.com>
---
 src/json.c     | 2 +-
 src/local.c    | 7 ++++---
 src/redir.c    | 4 ++--
 src/server.c   | 6 +++---
 src/tunnel.c   | 2 +-
 src/udprelay.c | 2 +-
 6 files changed, 12 insertions(+), 11 deletions(-)

--- a/src/json.c
+++ b/src/json.c
@@ -243,7 +243,7 @@ json_parse_ex(json_settings *settings,
               char *error_buf)
 {
     json_char error[json_error_max];
-    unsigned int cur_line;
+    int cur_line;
     const json_char *cur_line_begin, *i, *end;
     json_value *top, *root, *alloc = 0;
     json_state state = { 0UL, 0U, 0UL, { 0UL, 0, NULL, NULL, NULL }, 0 };
--- a/src/local.c
+++ b/src/local.c
@@ -745,7 +745,7 @@ stat_update_cb()
 static void
 remote_timeout_cb(EV_P_ ev_timer *watcher, int revents)
 {
-    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((void *)watcher)
+    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((char *)watcher)
                                                 - sizeof(ev_io));
     remote_t *remote = remote_ctx->remote;
     server_t *server = remote->server;
@@ -1558,9 +1558,10 @@ start_ss_local_server(profile_t profile)
     // Setup proxy context
     struct ev_loop *loop = EV_DEFAULT;
 
+    struct sockaddr **remote_addr_tmp = ss_malloc(sizeof(struct sockaddr *));
     listen_ctx_t listen_ctx;
     listen_ctx.remote_num     = 1;
-    listen_ctx.remote_addr    = ss_malloc(sizeof(struct sockaddr *));
+    listen_ctx.remote_addr    = remote_addr_tmp;
     listen_ctx.remote_addr[0] = (struct sockaddr *)storage;
     listen_ctx.timeout        = timeout;
     listen_ctx.method         = m;
@@ -1621,7 +1622,7 @@ start_ss_local_server(profile_t profile)
         close(listen_ctx.fd);
     }
 
-    ss_free(listen_ctx.remote_addr);
+    ss_free(remote_addr_tmp);
 
 #ifdef __MINGW32__
     winsock_cleanup();
--- a/src/redir.c
+++ b/src/redir.c
@@ -221,7 +221,7 @@ server_recv_cb(EV_P_ ev_io *w, int reven
             port = ntohs(sa->sin6_port);
         }
 
-        LOGI("redir to %s:%d, len=%zd, recv=%zd", ipstr, port, remote->buf->len, r);
+        LOGI("redir to %s:%d, len=%zu, recv=%zd", ipstr, port, remote->buf->len, r);
     }
 
     if (auth) {
@@ -329,7 +329,7 @@ server_send_cb(EV_P_ ev_io *w, int reven
 static void
 remote_timeout_cb(EV_P_ ev_timer *watcher, int revents)
 {
-    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((void *)watcher)
+    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((char *)watcher)
                                                 - sizeof(ev_io));
     remote_t *remote = remote_ctx->remote;
     server_t *server = remote->server;
--- a/src/server.c
+++ b/src/server.c
@@ -530,7 +530,7 @@ connect_to_remote(EV_P_ struct addrinfo
             ERROR("bind_to_address");
             close(sockfd);
             return NULL;
-        } 
+        }
 
 #ifdef SET_INTERFACE
     if (iface) {
@@ -543,7 +543,7 @@ connect_to_remote(EV_P_ struct addrinfo
 #endif
 
     remote_t *remote = new_remote(sockfd);
-  
+
 #ifdef TCP_FASTOPEN
     if (fast_open) {
 #ifdef __APPLE__
@@ -1050,7 +1050,7 @@ block_list_clear_cb(EV_P_ ev_timer *watc
 static void
 server_timeout_cb(EV_P_ ev_timer *watcher, int revents)
 {
-    server_ctx_t *server_ctx = (server_ctx_t *)(((void *)watcher)
+    server_ctx_t *server_ctx = (server_ctx_t *)(((char *)watcher)
                                                 - sizeof(ev_io));
     server_t *server = server_ctx->server;
     remote_t *remote = server->remote;
--- a/src/tunnel.c
+++ b/src/tunnel.c
@@ -285,7 +285,7 @@ server_send_cb(EV_P_ ev_io *w, int reven
 static void
 remote_timeout_cb(EV_P_ ev_timer *watcher, int revents)
 {
-    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((void *)watcher)
+    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((char *)watcher)
                                                 - sizeof(ev_io));
     remote_t *remote = remote_ctx->remote;
     server_t *server = remote->server;
--- a/src/udprelay.c
+++ b/src/udprelay.c
@@ -549,7 +549,7 @@ close_and_free_remote(EV_P_ remote_ctx_t
 static void
 remote_timeout_cb(EV_P_ ev_timer *watcher, int revents)
 {
-    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((void *)watcher)
+    remote_ctx_t *remote_ctx = (remote_ctx_t *)(((char *)watcher)
                                                 - sizeof(ev_io));
 
     if (verbose) {
