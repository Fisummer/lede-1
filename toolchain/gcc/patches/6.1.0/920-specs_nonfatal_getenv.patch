--- a/gcc/gcc.c
+++ b/gcc/gcc.c
@@ -4563,10 +4563,10 @@ process_command (unsigned int decoded_op
 
   if (print_version)
     n_varsafe_options++;
-  
+
   if (print_help_list)
     n_varsafe_options++;
-  
+
   spec_undefvar_allowed = (n_varsafe_options == decoded_options_count - 1);
 
   alloc_switch ();
@@ -5842,7 +5842,7 @@ do_spec_1 (const char *spec, int inswitc
 		     "%{foo=*:bar%*}%{foo=*:one%*two}"
 
 		   matches -foo=hello then it will produce:
-		   
+
 		     barhello onehellotwo
 		*/
 		if (*p == 0 || *p == '}')
@@ -9194,8 +9194,10 @@ getenv_spec_function (int argc, const ch
     value = varname;
 
   if (!value)
-    fatal_error (input_location,
-		 "environment variable %qs not defined", varname);
+    {
+      warning (input_location, "environment variable %qs not defined", varname);
+      value = "";
+    }
 
   /* We have to escape every character of the environment variable so
      they are not interpreted as active spec characters.  A
@@ -9508,9 +9510,9 @@ static unsigned HOST_WIDE_INT
 get_random_number (void)
 {
   unsigned HOST_WIDE_INT ret = 0;
-  int fd; 
+  int fd;
 
-  fd = open ("/dev/urandom", O_RDONLY); 
+  fd = open ("/dev/urandom", O_RDONLY);
   if (fd >= 0)
     {
       read (fd, &ret, sizeof (HOST_WIDE_INT));
@@ -9791,16 +9793,16 @@ greater_than_spec_func (int argc, const
   return NULL;
 }
 
-/* Insert backslash before spaces in ORIG (usually a file path), to 
+/* Insert backslash before spaces in ORIG (usually a file path), to
    avoid being broken by spec parser.
 
    This function is needed as do_spec_1 treats white space (' ' and '\t')
    as the end of an argument. But in case of -plugin /usr/gcc install/xxx.so,
    the file name should be treated as a single argument rather than being
-   broken into multiple. Solution is to insert '\\' before the space in a 
+   broken into multiple. Solution is to insert '\\' before the space in a
    file name.
-   
-   This function converts and only converts all occurrence of ' ' 
+
+   This function converts and only converts all occurrence of ' '
    to '\\' + ' ' and '\t' to '\\' + '\t'.  For example:
    "a b"  -> "a\\ b"
    "a  b" -> "a\\ \\ b"
